@import '_component';

// Focus circle
%check-focus-pseudo
{
    content: '';
    border: 1px solid transparent;
    border-radius: 100%;
    height: 3em;
    left: -1em;
    opacity: 0;
    position: absolute;
    top: -1em;
    transition: opacity .3s;
    width: 3em;
    z-index: -10;
}

// Absolutely positioned pseudo-elements
%check-absolute-pseudo
{
    left: 0;
    position: absolute;
    top: 0;
}
// Pseudo element for interactive element
%check-interactive-pseudo
{
    border: 2px solid;
    content: '';
    display: inline-block;
}

// Rules shared by all module's components
[role="checkbox"],
[data-css-role="checkbox"],
[role="radio"],
[data-css-role="radio"],
[role="switch"],
[data-css-role="switch"]
{
    background: none;
    border: none;
    display: inline-block;
    font-size: 1rem;
    margin: .5em 0;
    outline:  none;
    padding: 0;
    vertical-align: middle;

    > input[type="checkbox"],
    > input[type="radio"]
    {
        /* Hiding native checkbox/radio (when used) */
        display: none;
    }

    // Background button
    &::before
    {
        height: 1.25em;
        transition: background-color .3s, color .3s;
        width: 1.25em;

        @extend %check-absolute-pseudo;
        @extend %check-interactive-pseudo;
    }

    // Component states in button
    &:hover:not([data-css-state])::before,
    &:focus:not([data-css-state])::before,
    &[data-css-state="selected"]::before
    {
        @include component-background-border-colors(selected);
    }
    &:active:not([data-css-state])::before,
    &[data-css-state="pressed"]::before
    {
        @include component-background-border-colors(pressed);
    }
    &:not([data-css-state])::before, //After hover and active to override specificity
    &[data-css-state="normal"]::before
    {
        @include component-background-border-colors(normal);
    }
    &:disabled::before,
    &[aria-disabled]::before,
    &[data-css-state="disabled"]::before
    {
        @include component-background-border-colors(disabled);
    }


    // Component active part container
    > [data-css-toggle]
    {
        display: inline-block;
        min-height: 1.5em;
        padding-left: 2em;
        position: relative;
        vertical-align: middle;

        // Focus circle
        &::before
        {
            @extend %check-focus-pseudo;
        }

        // Tick (checkbox)/Bullet (radio)/ Toggle (switch)
        &::after
        {
            border: 2px solid transparent;
            height: 1em;
            width: 1em;

            @extend %check-absolute-pseudo;
        }
    }

    
    // States in focus circle
    &:focus > [data-css-toggle]::before,
    &:active > [data-css-toggle]::before
    {
        background-color: var(--css-selected-background);
        opacity: 1;
    }

    // Sizes
    &[data-css-size="small"]
    {
        font-size: .75em;
    }
    &[data-css-size="full"]
    {
        display: block;
    }
    &[data-css-size="big"]
    {
        font-size: 1.75em;
    }
    &[data-css-size="huge"]
    {
        font-size: 2.5em;
    }
    &[data-css-size="full"]
    {
        font-size: 4em;
    }
}

// Rules only for checkbox and radio
[role="checkbox"],
[data-css-role="checkbox"],
[role="radio"],
[data-css-role="radio"]
{
    > [data-css-toggle]
    {
        &::before,
        &::after
        {
            font-size: 1.25em;
        }

        // Tick (checkbox)/Bullet (radio)
        &::after
        {
            content: '\2714';
            line-height: 1em;
            opacity: 0;
            text-align: center;
            transition: .3s opacity, .3s line-height, .3s color;
        }
    }

    // Checked
    &[aria-checked="true"] > [data-css-toggle]::after,
    > input:checked + [data-css-toggle]::after
    {
        opacity: 1;
    }

    // Component states in tick/bullet/toggle
    &:hover:not([data-css-state]) > [data-css-toggle],
    &:focus:not([data-css-state]) > [data-css-toggle],
    &[data-css-state="selected"] > [data-css-toggle]
    {
        &::after
        {
            @include component-text-color(selected);
        }
    }
    &:active:not([data-css-state]) > [data-css-toggle],
    &[data-css-state="pressed"] > [data-css-toggle]
    {
        &::after
        {
            @include component-text-color(pressed);
        }
    }
    &:not([data-css-state]) > [data-css-toggle], //After hover and active to override specificity
    &[data-css-state="normal"] > [data-css-toggle]
    {
        &::after
        {
            @include component-text-color(normal);
        }
    }
    &:disabled > [data-css-toggle],
    &[aria-disabled] > [data-css-toggle],
    &[data-css-state="disabled"] > [data-css-toggle]
    {
        &::after
        {
            @include component-text-color(disabled);
        }
    }
}

// Specific checkbox rules
[role="checkbox"],
[data-css-role="checkbox"]
{
    &[aria-checked="mixed"] > [data-css-toggle]::after
    {
        content: '\2716';
        line-height: 1em;
        opacity: 1;
    }
}

// Specific radio rules
[role="radio"],
[data-css-role="radio"]
{
    // Background button
    &::before
    {
        border-radius: 50%;
        overflow: hidden;
    }

    // Bullet (radio)
    > [data-css-toggle]::after
    {
        content: '\2b24';
    }

    // Size specific corrections
    &[data-css-size="small"] > [data-css-toggle]::after
    {
        top: -0.05em;
    }
}

// Switch only styles
[role="switch"],
[data-css-role="switch"]
{
    padding-top: .25em;
    
    // Background bar
    &::before
    {
        border-radius: 1em;
        height: 1em;
        margin-top: .25em;
        width: 3em;
    }

    // States
    &:hover:not([data-css-state]),
    &:focus:not([data-css-state]),
    &[data-css-state="selected"]
    {
        &::before,
        > [data-css-toggle]::after
        {
            @include component-background-border-colors(selected);
        }

        > input:checked + [data-css-toggle],
        &[aria-checked="true"] > [data-css-toggle]
        {
            &::after
            {
                @include component-background-border-colors(pressed);
            }
        }
    }
    &:active:not([data-css-state]),
    &[data-css-state="pressed"]
    {
        &::before,
        > [data-css-toggle]::after
        {
            @include component-background-border-colors(pressed);
        }

        > input:checked + [data-css-toggle],
        &[aria-checked="true"] > [data-css-toggle]
        {
            &::after
            {
                @include component-background-border-colors(normal);
            }
        }
    }
    &:not([data-css-state]), // Overiding specificity
    &[data-css-state="normal"]
    {
        &::before,
        > [data-css-toggle]::after
        {
            @include component-background-border-colors(normal);
        }

        > input:checked + [data-css-toggle],
        &[aria-checked="true"] > [data-css-toggle]
        {
            &::after
            {
                @include component-background-border-colors(selected);
            }
        }
    }
    &[disabled],
    &[aria-disabled],
    &[data-css-state="disabled"]
    {
        &::before,
        > [data-css-toggle]::after
        {
            @include component-background-border-colors(disabled);
        }
    }

    // Inner container, selection bar and toggle
    > [data-css-toggle]
    {
        padding-left: 4.5em;
        min-height: 1.75em;

        // Focus circle
        &::before
        {
            left: -0.8em;
            transition: opacity .3s, left .3s;
        }

        // Toggle
        &::after
        {
            border-radius: 1em;
            height: 1.5em;
            margin-top: -0.25em;
            opacity: 1;
            transition: left .3s;
            width: 1.5em;
    
            @extend %check-interactive-pseudo;
        }
    }

    // Functionality
    > input:checked + [data-css-toggle],
    &[aria-checked="true"] > [data-css-toggle]
    {
        &::before
        {
            left: .8em;           
        }
        &::after
        {
            left: 1.5em;
        }
    }
}