/* Color properties */
:root
{
    /* black and white universal properties */
    --css-black: #000;
    --css-white: #FFF;
    /* default palette (Grey) */
    --css-primary-50: #FAFAFA;
    --css-primary-100: #F5F5F5;
    --css-primary-200: #EEEEEE;
    --css-primary-300: #E0E0E0;
    --css-primary-400: #BDBDBD;
    --css-primary-500: #9E9E9E;
    --css-primary-600: #757575;
    --css-primary-700: #616161;
    --css-primary-800: #424242;
    --css-primary-900: #212121;
}

// Defines a set of colors (background, border, text) for a named group in a palette
@mixin pallete-color-group($palette, $group, $background, $border, $text)
{
    // Background
    @if ($background == white or $background == black)
    {
        --css-#{$group}-background: var(--css-#{$background});
    }
    @else
    {
        --css-#{$group}-background: var(--css-#{$palette}-#{$background});
    }
    
    // Border
    @if ($border == white or $border == black)
    {
        --css-#{$group}-border: var(--css-#{$border});
    }
    @else
    {
        --css-#{$group}-border: var(--css-#{$palette}-#{$border});
    }

    // Text
    @if ($text == white or $text == black)
    {
        --css-#{$group}-text: var(--css-#{$text});
    }
    @else
    {
        --css-#{$group}-text: var(--css-#{$palette}-#{$text});
    }
}

// Light theme colors
body:not(data-css-theme),
body[data-css-theme="light"]
{
    &
    {
        background: var(--css-primary-50);
        color: var(--css-primary-800);
    }
    
    * {
        &[data-css-accent],
        & [data-css-accent],
        [data-css-accent] &
        {
            // Normal state
            @include pallete-color-group(accent, normal, 100, 500, 800);
            // Selected state
            @include pallete-color-group(accent, selected, 300, 700, 900);
            // Pressed state
            @include pallete-color-group(accent, pressed, 400, 900, 900);
            // Disabled state
            @include pallete-color-group(accent, disabled, 50, 300, 700);
        }
    
        &,
        & [data-css-primary],
        &[data-css-primary],
        [data-css-primary] &
        {
            // Normal state
            @include pallete-color-group(primary, normal, 100, 500, 800);
            // Selected state
            @include pallete-color-group(primary, selected, 300, 700, 900);
            // Pressed state
            @include pallete-color-group(primary, pressed, 400, 900, 900);
            // Disabled state
            @include pallete-color-group(primary, disabled, 50, 300, 700);

        }

        // Info type
        &[data-css-type="info"]
        {
            &[data-css-accent],
            & [data-css-accent],
            [data-css-accent] &
            {
                // Normal state
                @include pallete-color-group(accent, normal, white, 100, 800);
            }

            &,
            & [data-css-primary],
            &[data-css-primary],
            {
                // Normal state
                @include pallete-color-group(primary, normal, white, 100, 800);            
            }
        }
        
        // Success type
        &[data-css-type="success"]
        {
            
            &[data-css-accent],
            & [data-css-accent],
            [data-css-accent] &
            {
                // Normal state
                @include pallete-color-group(accent, normal, 200, 300, 800);
            }

            &,
            & [data-css-primary],
            &[data-css-primary],
            {
                // Normal state
                @include pallete-color-group(primary, normal, 200, 300, 800);            
            }
        }

        // Warning type
        &[data-css-type="warning"]
        {
            
            &[data-css-accent],
            & [data-css-accent],
            [data-css-accent] &
            {
                // Normal state
                @include pallete-color-group(accent, normal, 500, 600, black);
            }

            &,
            & [data-css-primary],
            &[data-css-primary],
            {
                // Normal state
                @include pallete-color-group(primary, normal, 500, 600, black);
            }
        }

        // Error type
        &[data-css-type="error"]
        {
            
            &[data-css-accent],
            & [data-css-accent],
            [data-css-accent] &
            {
                // Normal state
                @include pallete-color-group(accent, normal, 700, 800, white);
            }

            &,
            & [data-css-primary],
            &[data-css-primary],
            {
                // Normal state
                @include pallete-color-group(primary, normal, 700, 800, white);
            }
        }
    }
}

// Components dark theme colors
// body[data-css-theme="dark"]
// {
//     &
//     {
//         background: var(--css-primary-900);
//         color: var(--css-primary-100);
//     }
    
//     * {
//         &[data-css-accent],
//         & [data-css-accent],
//         [data-css-accent] &
//         {
//             // Normal state
//             @include pallete-color-group(accent, normal, 800, 500, 100);
//             // Selected state
//             @include pallete-color-group(accent, selected, 600, 300, 200);
//             // Pressed state
//             @include pallete-color-group(accent, pressed, 500, 200, 200);
//             // Disabled state
//             @include pallete-color-group(accent, disabled, 900, 700, 200);
//         }
    
//         &,
//         & [data-css-primary],
//         &[data-css-primary],
//         [data-css-primary] &
//         {
//             // Normal state
//             @include pallete-color-group(primary, normal, 800, 500, 100);
//             // Selected state
//             @include pallete-color-group(primary, selected, 600, 300, 200);
//             // Pressed state
//             @include pallete-color-group(primary, pressed, 500, 200, 200);
//             // Disabled state
//             @include pallete-color-group(primary, disabled, 900, 700, 200);
//         }
//     }
// }




/* Basic styles */
html,
body
{
    display: block;
    min-height: 100%;
    position: relative;
    margin: 0;
    min-width: 100%;
    z-index: 1;
}
body
{
    font-family: "Trebuchet MS", Helvetica, sans-serif;
    font-size: 14px;
}
[role],
[data-css-role]
{
    position: relative;
}



/* Colors */
[data-css-primary]
{
    color: var(--css-primary-900);
}
[data-css-accent]
{
    color: var(--css-accent-900);
}



/* Hidden items */
[aria-hidden="true"]
{
    display: none;
}



/* Headers */
h1, h2, h3, h4, h5, h6,
[data-css-role="heading"]
[role="heading"]
{
    font-family: Arial, Helvetica, sans-serif;
    font-size: 14px;
    font-weight: normal;
    margin-top: 0;
    margin-bottom: 1.875rem;
    text-decoration: none;

    &[data-css-accent],
    [data-css-accent] &
    {
        color: var(--css-accent-600);
    }

    &,
    &[data-css-primary],
    [data-css-primary] &
    {
        color: var(--css-primary-600);
    }
}

h1
{
    font-size: 2.617rem;
}
h2
{
    font-size: 2.292rem;
}
h3
{
    font-size: 1.969em;
}
h4
{
    font-size: 1.646em;
}
h5
{
    font-size: 1.323em;
}



/* Floats and clears */
[data-css-float="left"]
{
    float: left;
}
[data-css-float="right"]
{
    float: right;
}
[data-css-clear="left"]
{
    clear: left;
}
[data-css-clear="right"]
{
    clear: right;
}
[data-css-clear="both"]
{
    clear: both;
}



/* Positioning */
[data-css-position="absolute"]
{
    position: absolute;
}
[data-css-position="fixed"]
{
    position: fixed;
}
[data-css-position="relative"]
{
    position: relative;
}
[data-css-position="static"]
{
    position: static;
}
[data-css-position="sticky"]
{
    position: sticky;
}



/* Text formatting */
[data-css-bold]
{
    font-weight: bold;
}
[data-css-italic]
{
    font-style: italic;
}
[data-css-line-through]
{
    text-decoration: line-through;
}
[data-css-oblique]
{
    font-style: oblique;
}
[data-css-overline]
{
    text-decoration: overline;
}
[data-css-underline]
{
    text-decoration: underline;
}