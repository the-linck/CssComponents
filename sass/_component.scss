$css-default-theme: "light";



// Gets a collor in the specified palette
@function css-get-color($palette, $color)
{
    $result: null;

    @if ($color == white or $color == black)
    {
        $result: var(--css-#{$color});
    }
    @else
    {
        $result: var(--css-#{$palette}-#{$color});
    }

    @return $result;
}



// Assings the asked collors of the specified palette in the specified properties
@mixin css-get-palette-colors($palette, $group, $colors)
{
    @each $declared, $property in $colors
    {
        #{$property}: var(--css-#{$group}-#{$declared});
    }
}



// Template for properties that affect both palettes in a theme
@mixin css-theme-selectors ($theme, $palette, $pseudo:'') {
    $theme-selector: '[data-css-theme="#{$theme}"]';

    @if ($palette == 'accent')
    {
        // Accent color
        @at-root #{$theme-selector} &[data-css-color="accent"]#{$pseudo},
        #{$theme-selector} [data-css-color="accent"] &:not([data-css-color])#{$pseudo}
        {
            @content;
        }
        @if ($theme == $css-default-theme)
        {
            @at-root :not([data-css-theme]) &[data-css-color="accent"]#{$pseudo},
            :not([data-css-theme]) [data-css-color="accent"] &:not([data-css-color])#{$pseudo}
            {
                @content;
            }
        }
    }
    @else
    {
        // Primary color
        #{$theme-selector} &:not([data-css-color])#{$pseudo},
        #{$theme-selector} &[data-css-color="primary"]#{$pseudo},
        #{$theme-selector} [data-css-color="primary"] &:not([data-css-color])#{$pseudo}
        {
            @content;
        }
        @if ($theme == $css-default-theme)
        {
            @at-root :not([data-css-theme]) &:not([data-css-color])#{$pseudo},
            :not([data-css-theme]) &[data-css-color="primary"]#{$pseudo},
            :not([data-css-theme]) [data-css-color="primary"] &:not([data-css-color])#{$pseudo}
            {
                @content;
            }
        }
    }
}



// Assings the asked collors of both palettes in the specified properties
@mixin css-get-cascade-colors(
    $theme, $group, $pseudo: '',
    $colors: (
        'background': 'background-color',
        'border': 'border-color',
        'text': 'color'
    )
)
{
    @include css-theme-selectors($theme: $theme, $palette: 'primary', $pseudo: $pseudo)
    {
        /* Getting #{$theme} theme #{$group} primary colors */
        @include css-get-palette-colors($palette: 'primary', $group: $group, $colors: $colors);
    }

    @include css-theme-selectors($theme: $theme, $palette: 'accent', $pseudo: $pseudo)
    {
        /* Getting #{$theme} theme #{$group} accent colors */
        @include css-get-palette-colors($palette: 'accent', $group: $group, $colors: $colors);
    }
}



// Assings the asked variables of the given palette
@mixin css-set-palette-colors($palette, $group, $colors)
{
    @each $property, $color in $colors
    {
        --css-#{$group}-#{$property}: css-get-color($palette, $color);
    }
}



// Assings the asked variables of both palettes
@mixin css-set-cascade-colors($theme, $group, $colors, $pseudo: '')
{   
    @include css-theme-selectors($theme: $theme, $palette: 'primary', $pseudo: $pseudo)
    {
        /* Setting #{$theme} theme #{$group} primary colors */
        @include css-set-palette-colors($palette: 'primary', $group: $group, $colors: $colors);
    }

    @include css-theme-selectors($theme: $theme, $palette: 'accent', $pseudo: $pseudo)
    {
        /* Setting #{$theme} theme #{$group} accent colors */
        @include css-set-palette-colors($palette: 'accent', $group: $group, $colors: $colors);
    }
}